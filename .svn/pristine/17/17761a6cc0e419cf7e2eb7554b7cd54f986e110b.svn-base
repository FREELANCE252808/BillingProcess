using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using System.Transactions;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using WebAPI.Dtos;
using WebAPI.Helpers;
using WebAPI.Interfaces;
using WebAPI.Models;

namespace WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserController : BaseController
    {
        private readonly IUnitOfWork uow;

        public UserController(IUnitOfWork uow)
        {
            this.uow = uow;
        }

        [HttpGet]
        [Route("GetUsers")]
        public async Task<ResponseResultDto> GetUsers()
        {
            ResponseResultDto result = new ResponseResultDto();
            List<User> lstUsers = new List<User>();
            try
            {
                lstUsers = await uow.UserRepository.GetUsersAsync();
                result.data = lstUsers;
                result.MessageType = "S";
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return result;
        }

        // GET: api/User/5
        [HttpGet("{id}", Name = "GetUserByUserID")]
        [Route("GetUserByUserID")]
        public async Task<User> GetUserByUserID(int userID)
        {
            try
            {
                User user = await uow.UserRepository.FindUser(userID);
                List<UserRole> ur = await uow.UserRoleRepository.GetUserRoleByUserId(userID);

                User userDetails = new User
                {
                    UserID = userID,
                    CompanyID = user.CompanyID,
                    FirstName = user.FirstName,
                    LastName = user.LastName,
                    Password = user.Password,
                    EmailId = user.EmailId,
                    ImagePath = user.ImagePath,
                    Status = user.Status,
                    UserRoles = ur
                };

                return userDetails;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        [Route("AddUser")]
        public async Task<IActionResult> AddUserAndRole([FromBody]User userDetails)
        {
            ResponseResultDto res = new ResponseResultDto();

            try
            {
                ClaimsIdentity identity = User.Identity as ClaimsIdentity;
                if (identity != null)
                {
                    IEnumerable<Claim> claims = identity.Claims;
                    var UserId = claims.Where(p => p.Type == "userId").FirstOrDefault()?.Value;
                    int userID = Convert.ToInt32(UserId);

                    User user = new User
                    {
                        //UserID = 0,
                        CompanyID = userDetails.CompanyID,
                        FirstName = userDetails.FirstName,
                        LastName = userDetails.LastName,
                        EmailId = userDetails.EmailId,
                        ImagePath = userDetails.ImagePath,
                        Status = userDetails.Status,
                        Password = userDetails.Password,
                        CreatedBy = userID,
                        CreatedOn = DateTime.Now,
                        ModifiedBy = userID,
                        ModifiedOn = DateTime.Now,
                        UserRoles = userDetails.UserRoles
                    };

                    uow.UserRepository.AddUser(user);
                    uow.UserRoleRepository.AddUserRole(user.UserRoles);

                    await uow.SaveAsync();

                    res.MessageType = "S";
                    res.Message = MessageConstant.RecordAdded;
                    return Ok(new { ResponseResultDto = res });
                }

                res.MessageType = "E";
                res.Message = MessageConstant.FailedToAddRecord;
                return Ok(new { ResponseResultDto = res });
            }
            catch (Exception ex)
            {
                res.MessageType = "E";
                res.Message = MessageConstant.FailedToAddRecord;
                return Ok(new { ResponseResultDto = res });
            }
        }

        // PUT: api/User/5
        [HttpPut("{id}")]
        [Route("UpdateUser")]
        public async Task<IActionResult> UpdateUserAndRole([FromBody]User userDetails)
        {
            ResponseResultDto res = new ResponseResultDto();

            try
            {
                ClaimsIdentity identity = User.Identity as ClaimsIdentity;
                if (identity != null)
                {
                    IEnumerable<Claim> claims = identity.Claims;
                    var UserId = claims.Where(p => p.Type == "userId").FirstOrDefault()?.Value;
                    int userID = Convert.ToInt32(UserId);

                    User user = new User
                    {
                        UserID = userDetails.UserID,
                        CompanyID = userDetails.CompanyID,
                        FirstName = userDetails.FirstName,
                        LastName = userDetails.LastName,
                        EmailId = userDetails.EmailId,
                        ImagePath = userDetails.ImagePath,
                        Status = userDetails.Status,
                        Password = userDetails.Password,
                        CreatedBy = userID,
                        CreatedOn = DateTime.Now,
                        ModifiedBy = userID,
                        ModifiedOn = DateTime.Now
                    };

                    uow.UserRepository.UpdateUser(user);

                    uow.UserRoleRepository.DeleteUserRoleByUserId(user.UserID);
                    uow.UserRoleRepository.AddUserRole(userDetails.UserRoles);

                    await uow.SaveAsync();

                    res.MessageType = "S";
                    res.Message = MessageConstant.RecordUpdated;
                    return Ok(new { ResponseResultDto = res });
                }

                res.MessageType = "E";
                res.Message = MessageConstant.FailedToUpdateRecord;
                return Ok(new { ResponseResultDto = res });
            }
            catch(Exception ex)
            {
                res.MessageType = "E";
                res.Message = MessageConstant.FailedToUpdateRecord;
                return Ok(new { ResponseResultDto = res });
            }
        }

        // DELETE: api/ApiWithActions/5
        [HttpDelete("{id}")]
        [Route("DeleteUser")]
        public async Task<IActionResult> DeleteUser(int userID)
        {
            ResponseResultDto res = new ResponseResultDto();

            try
            {
                uow.UserRoleRepository.DeleteUserRoleByUserId(userID);
                uow.UserRepository.DeleteUser(userID);

                await uow.SaveAsync();

                res.MessageType = "S";
                res.Message = MessageConstant.RecordDeleted;
                return Ok(new { ResponseResultDto = res });
            }
            catch
            {
                res.MessageType = "E";
                res.Message = MessageConstant.FailedToDeleteRecord;
                return Ok(new { ResponseResultDto = res });
            }
        }
    }
}
