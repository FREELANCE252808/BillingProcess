using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using WebAPI.Dtos;
using WebAPI.Helpers;
using WebAPI.Interfaces;
using WebAPI.Models;

namespace WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class RoleController : BaseController
    {
        private readonly IUnitOfWork uow;

        public RoleController(IUnitOfWork uow)
        {
            this.uow = uow;
        }
        
        [HttpGet]
        [Route("GetRoles")]
        public async Task<ResponseResultDto> GetRoles()
        {
            ResponseResultDto result = new ResponseResultDto();
            List<Role> lstroles=new List<Role>();
            try
            {
                lstroles = await uow.RolesRepository.GetRolesAsync();
                result.data = lstroles;
                result.MessageType = "S";
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return result;
        }

        // GET: api/Role/5
        [HttpGet("{id}", Name = "Get")]
        [Route("GetRoleByRoleID")]
        public async Task<Role> GetRoleByRoleID(int roleID)
        {
            Role role;
            try
            {
                role = await uow.RolesRepository.FindRole(roleID);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return role;
        }

        [HttpPost]
        [Route("AddRole")]
        public async Task<IActionResult> AddRole([FromBody]Role role)
        {
            ResponseResultDto res = new ResponseResultDto();

            try
            {
                uow.RolesRepository.AddRole(role);
                await uow.SaveAsync();

                res.MessageType = "S";
                res.Message = MessageConstant.RecordAdded;
                return Ok(new { ResponseResultDto = res });
            }
            catch
            {
                res.MessageType = "E";
                res.Message = MessageConstant.FailedToAddRecord;
                return Ok(new { ResponseResultDto = res });
            }
        }

        // PUT: api/Role/5
        [HttpPut("{id}")]
        [Route("UpdateRole")]
        public async Task<IActionResult> UpdateRole([FromBody]Role role)
        {
            ResponseResultDto res = new ResponseResultDto();

            try
            {
                uow.RolesRepository.UpdateRole(role);
                await uow.SaveAsync();

                res.MessageType = "S";
                res.Message = MessageConstant.RecordUpdated;
                return Ok(new { ResponseResultDto = res });
            }
            catch
            {
                res.MessageType = "E";
                res.Message = MessageConstant.FailedToUpdateRecord;
                return Ok(new { ResponseResultDto = res });
            }
        }

        // DELETE: api/ApiWithActions/5
        [HttpDelete("{id}")]
        [Route("DeleteRole")]
        public async Task<IActionResult> DeleteRole(int roleID)
        {
            ResponseResultDto res = new ResponseResultDto();

            try
            {
                uow.RolesRepository.DeleteRole(roleID);
                await uow.SaveAsync();

                res.MessageType = "S";
                res.Message = MessageConstant.RecordDeleted;
                return Ok(new { ResponseResultDto = res });
            }
            catch
            {
                res.MessageType = "E";
                res.Message = MessageConstant.FailedToDeleteRecord;
                return Ok(new { ResponseResultDto = res });
            }
        }
    }
}
